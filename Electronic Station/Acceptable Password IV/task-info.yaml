type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    # Taken from mission Acceptable Password III

    # Taken from mission Acceptable Password II

    # Taken from mission Acceptable Password I

    def is_acceptable_password(password: str) -> bool:
        # your code here
        a = False
        for i in password:
            if i.isdigit():
                a = True
        if len(password)>9:
            a = True
        elif password.isdigit():
            return False
        return len(password) > 6 and a


    if __name__ == '__main__':
        print("Example:")
        print(is_acceptable_password('short'))

        # These "asserts" are used for self-checking and not for an auto-testing
        assert is_acceptable_password('short') == False
        assert is_acceptable_password('muchlonger') == True
        assert is_acceptable_password('ashort') == False
        print("Coding complete? Click 'Check' to earn cool rewards!")


    if __name__ == "__main__":
        # These "asserts" are used for self-checking and not for an auto-testing
        assert is_acceptable_password("short") == False
        assert is_acceptable_password("muchlonger") == False
        assert is_acceptable_password("ashort") == False
        assert is_acceptable_password("muchlonger5") == True
        assert is_acceptable_password("sh5") == False
        print("Coding complete? Click 'Check' to earn cool rewards!")


    if __name__ == "__main__":
        # These "asserts" are used for self-checking and not for an auto-testing
        assert is_acceptable_password("short") == False
        assert is_acceptable_password("muchlonger") == False
        assert is_acceptable_password("ashort") == False
        assert is_acceptable_password("muchlonger5") == True
        assert is_acceptable_password("sh5") == False
        assert is_acceptable_password("1234567") == False
        print("Coding complete? Click 'Check' to earn cool rewards!")


    if __name__ == "__main__":
        # These "asserts" are used for self-checking and not for an auto-testing
        assert is_acceptable_password("short") == False
        assert is_acceptable_password("short54") == True
        assert is_acceptable_password("muchlonger") == True
        assert is_acceptable_password("ashort") == False
        assert is_acceptable_password("muchlonger5") == True
        assert is_acceptable_password("sh5") == False
        assert is_acceptable_password("1234567") == False
        assert is_acceptable_password("12345678910") == True
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Solved
code: |
  # Taken from mission Acceptable Password III

  # Taken from mission Acceptable Password II

  # Taken from mission Acceptable Password I

  def is_acceptable_password(password: str) -> bool:
      # your code here
      a = False
      for i in password:
          if i.isdigit():
              a = True
      if len(password)>9:
          a = True
      elif password.isdigit():
          return False
      return len(password) > 6 and a


  if __name__ == '__main__':
      print("Example:")
      print(is_acceptable_password('short'))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password('short') == False
      assert is_acceptable_password('muchlonger') == True
      assert is_acceptable_password('ashort') == False
      print("Coding complete? Click 'Check' to earn cool rewards!")


  if __name__ == "__main__":
      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password("short") == False
      assert is_acceptable_password("muchlonger") == False
      assert is_acceptable_password("ashort") == False
      assert is_acceptable_password("muchlonger5") == True
      assert is_acceptable_password("sh5") == False
      print("Coding complete? Click 'Check' to earn cool rewards!")


  if __name__ == "__main__":
      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password("short") == False
      assert is_acceptable_password("muchlonger") == False
      assert is_acceptable_password("ashort") == False
      assert is_acceptable_password("muchlonger5") == True
      assert is_acceptable_password("sh5") == False
      assert is_acceptable_password("1234567") == False
      print("Coding complete? Click 'Check' to earn cool rewards!")


  if __name__ == "__main__":
      # These "asserts" are used for self-checking and not for an auto-testing
      assert is_acceptable_password("short") == False
      assert is_acceptable_password("short54") == True
      assert is_acceptable_password("muchlonger") == True
      assert is_acceptable_password("ashort") == False
      assert is_acceptable_password("muchlonger5") == True
      assert is_acceptable_password("sh5") == False
      assert is_acceptable_password("1234567") == False
      assert is_acceptable_password("12345678910") == True
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 11850651
