type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    def split_list(items: list) -> list:
        # your code here
        return [items[:len(items) // 2], items[len(items) // 2:]] if len(items) % 2 == 0 else [items[:len(items) // 2 + 1],
                                                                                               items[len(items) // 2 + 1:]]


    if __name__ == '__main__':
        print("Example:")
        print(split_list([1, 2, 3, 4, 5, 6]))

        # These "asserts" are used for self-checking and not for an auto-testing
        assert split_list([1, 2, 3, 4, 5, 6]) == [[1, 2, 3], [4, 5, 6]]
        assert split_list([1, 2, 3]) == [[1, 2], [3]]
        assert split_list([1, 2, 3, 4, 5]) == [[1, 2, 3], [4, 5]]
        assert split_list([1]) == [[1], []]
        assert split_list([]) == [[], []]
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Solved
code: |
  def split_list(items: list) -> list:
      # your code here
      return [items[:len(items) // 2], items[len(items) // 2:]] if len(items) % 2 == 0 else [items[:len(items) // 2 + 1],
                                                                                             items[len(items) // 2 + 1:]]


  if __name__ == '__main__':
      print("Example:")
      print(split_list([1, 2, 3, 4, 5, 6]))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert split_list([1, 2, 3, 4, 5, 6]) == [[1, 2, 3], [4, 5, 6]]
      assert split_list([1, 2, 3]) == [[1, 2], [3]]
      assert split_list([1, 2, 3, 4, 5]) == [[1, 2, 3], [4, 5]]
      assert split_list([1]) == [[1], []]
      assert split_list([]) == [[], []]
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 12718562
