type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    def between_markers(text: str, begin: str, end: str) -> str:
        """
            returns substring between two given markers
        """

        # your code here
        return text[text.find(begin) + 1:text.rfind(end)]


    if __name__ == '__main__':
        print('Example:')
        print(between_markers('What is >apple<', '>', '<'))

        # These "asserts" are used for self-checking and not for testing
        assert between_markers('What is >apple<', '>', '<') == "apple"
        assert between_markers('What is [apple]', '[', ']') == "apple"
        assert between_markers('What is ><', '>', '<') == ""
        assert between_markers('>apple<', '>', '<') == "apple"
        print('Wow, you are doing pretty good. Time to check it!')
  learner_created: false
status: Solved
code: |
  def between_markers(text: str, begin: str, end: str) -> str:
      """
          returns substring between two given markers
      """

      # your code here
      return text[text.find(begin) + 1:text.rfind(end)]


  if __name__ == '__main__':
      print('Example:')
      print(between_markers('What is >apple<', '>', '<'))

      # These "asserts" are used for self-checking and not for testing
      assert between_markers('What is >apple<', '>', '<') == "apple"
      assert between_markers('What is [apple]', '[', ']') == "apple"
      assert between_markers('What is ><', '>', '<') == ""
      assert between_markers('>apple<', '>', '<') == "apple"
      print('Wow, you are doing pretty good. Time to check it!')
seconds_from_change: 13665584
