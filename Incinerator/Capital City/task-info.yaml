type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    class SingletonMeta(type):
        _instances = {}

        def __call__(cls, *args, **kwargs):
            if cls not in cls._instances:
                instance = super().__call__(*args, **kwargs)
                cls._instances[cls] = instance
            return cls._instances[cls]


    class Capital(metaclass=SingletonMeta):

        def __init__(self, name):
            self.capital = name

        def name(self):
            return self.capital


    if __name__ == '__main__':
        # These "asserts" using only for self-checking and not necessary for auto-testing

        ukraine_capital_1 = Capital("Kyiv")
        ukraine_capital_2 = Capital("London")
        ukraine_capital_3 = Capital("Marocco")

        assert ukraine_capital_2.name() == "Kyiv"
        assert ukraine_capital_3.name() == "Kyiv"

        assert ukraine_capital_2 is ukraine_capital_1
        assert ukraine_capital_3 is ukraine_capital_1

        print("Coding complete? Let's try tests!")
  learner_created: false
status: Solved
code: |
  class SingletonMeta(type):
      _instances = {}

      def __call__(cls, *args, **kwargs):
          if cls not in cls._instances:
              instance = super().__call__(*args, **kwargs)
              cls._instances[cls] = instance
          return cls._instances[cls]


  class Capital(metaclass=SingletonMeta):

      def __init__(self, name):
          self.capital = name

      def name(self):
          return self.capital


  if __name__ == '__main__':
      # These "asserts" using only for self-checking and not necessary for auto-testing

      ukraine_capital_1 = Capital("Kyiv")
      ukraine_capital_2 = Capital("London")
      ukraine_capital_3 = Capital("Marocco")

      assert ukraine_capital_2.name() == "Kyiv"
      assert ukraine_capital_3.name() == "Kyiv"

      assert ukraine_capital_2 is ukraine_capital_1
      assert ukraine_capital_3 is ukraine_capital_1

      print("Coding complete? Let's try tests!")
seconds_from_change: 884016
