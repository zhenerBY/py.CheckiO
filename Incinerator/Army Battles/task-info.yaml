type: checkiO
files:
- name: mission.py
  visible: true
  text: "# Taken from mission The Warriors\n\nclass Warrior:\n\n    def __init__(self):\n\
    \        self.health = 50\n        self.attack = 5\n\n    @property\n    def is_alive(self):\n\
    \        return True if self.health > 0 else False\n\n\nclass Knight(Warrior):\n\
    \n    def __init__(self):\n        super().__init__()\n        self.attack = 7\n\
    \n\ndef fight(unit_1, unit_2):\n    while unit_1.is_alive and unit_2.is_alive:\n\
    \        unit_2.health -= unit_1.attack\n        if unit_2.is_alive:\n       \
    \     unit_1.health -= unit_2.attack\n        else:\n            return True\n\
    \    return False\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using\
    \ only for self-checking and not necessary for auto-testing\n\n    chuck = Warrior()\n\
    \    bruce = Warrior()\n    carl = Knight()\n    dave = Warrior()\n    mark =\
    \ Warrior()\n\n    assert fight(chuck, bruce) == True\n    assert fight(dave,\
    \ carl) == False\n    assert chuck.is_alive == True\n    assert bruce.is_alive\
    \ == False\n    assert carl.is_alive == True\n    assert dave.is_alive == False\n\
    \    assert fight(carl, mark) == False\n    assert carl.is_alive == False\n\n\
    \    print(\"Coding complete? Let's try tests!\")\n\n\nif __name__ == '__main__':\n\
    \    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n\
    \    \n    #fight tests\n    chuck = Warrior()\n    bruce = Warrior()\n    carl\
    \ = Knight()\n    dave = Warrior()\n    mark = Warrior()\n\n    assert fight(chuck,\
    \ bruce) == True\n    assert fight(dave, carl) == False\n    assert chuck.is_alive\
    \ == True\n    assert bruce.is_alive == False\n    assert carl.is_alive == True\n\
    \    assert dave.is_alive == False\n    assert fight(carl, mark) == False\n  \
    \  assert carl.is_alive == False\n\n    #battle tests\n    my_army = Army()\n\
    \    my_army.add_units(Knight, 3)\n    \n    enemy_army = Army()\n    enemy_army.add_units(Warrior,\
    \ 3)\n\n    army_3 = Army()\n    army_3.add_units(Warrior, 20)\n    army_3.add_units(Knight,\
    \ 5)\n    \n    army_4 = Army()\n    army_4.add_units(Warrior, 30)\n\n    battle\
    \ = Battle()\n\n    assert battle.fight(my_army, enemy_army) == True\n    assert\
    \ battle.fight(army_3, army_4) == False\n    print(\"Coding complete? Let's try\
    \ tests!\")\n"
  learner_created: false
status: Unchecked
code: "# Taken from mission The Warriors\n\nclass Warrior:\n\n    def __init__(self):\n\
  \        self.health = 50\n        self.attack = 5\n\n    @property\n    def is_alive(self):\n\
  \        return True if self.health > 0 else False\n\n\nclass Knight(Warrior):\n\
  \n    def __init__(self):\n        super().__init__()\n        self.attack = 7\n\
  \n\ndef fight(unit_1, unit_2):\n    while unit_1.is_alive and unit_2.is_alive:\n\
  \        unit_2.health -= unit_1.attack\n        if unit_2.is_alive:\n         \
  \   unit_1.health -= unit_2.attack\n        else:\n            return True\n   \
  \ return False\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only\
  \ for self-checking and not necessary for auto-testing\n\n    chuck = Warrior()\n\
  \    bruce = Warrior()\n    carl = Knight()\n    dave = Warrior()\n    mark = Warrior()\n\
  \n    assert fight(chuck, bruce) == True\n    assert fight(dave, carl) == False\n\
  \    assert chuck.is_alive == True\n    assert bruce.is_alive == False\n    assert\
  \ carl.is_alive == True\n    assert dave.is_alive == False\n    assert fight(carl,\
  \ mark) == False\n    assert carl.is_alive == False\n\n    print(\"Coding complete?\
  \ Let's try tests!\")\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using\
  \ only for self-checking and not necessary for auto-testing\n    \n    #fight tests\n\
  \    chuck = Warrior()\n    bruce = Warrior()\n    carl = Knight()\n    dave = Warrior()\n\
  \    mark = Warrior()\n\n    assert fight(chuck, bruce) == True\n    assert fight(dave,\
  \ carl) == False\n    assert chuck.is_alive == True\n    assert bruce.is_alive ==\
  \ False\n    assert carl.is_alive == True\n    assert dave.is_alive == False\n \
  \   assert fight(carl, mark) == False\n    assert carl.is_alive == False\n\n   \
  \ #battle tests\n    my_army = Army()\n    my_army.add_units(Knight, 3)\n    \n\
  \    enemy_army = Army()\n    enemy_army.add_units(Warrior, 3)\n\n    army_3 = Army()\n\
  \    army_3.add_units(Warrior, 20)\n    army_3.add_units(Knight, 5)\n    \n    army_4\
  \ = Army()\n    army_4.add_units(Warrior, 30)\n\n    battle = Battle()\n\n    assert\
  \ battle.fight(my_army, enemy_army) == True\n    assert battle.fight(army_3, army_4)\
  \ == False\n    print(\"Coding complete? Let's try tests!\")\n"
seconds_from_change: 9223372036854775807
