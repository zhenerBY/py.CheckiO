type: checkiO
files:
- name: mission.py
  visible: true
  text: "# Taken from mission The Vampires\n\n# Taken from mission The Defenders\n\
    \n# Taken from mission Army Battles\n\n# Taken from mission The Warriors\n\nclass\
    \ Warrior:\n\n    def __init__(self):\n        self.health = 50\n        self.attack\
    \ = 5\n        self.defense = 0\n        self.vampirism = 0\n\n    @property\n\
    \    def is_alive(self):\n        return True if self.health > 0 else False\n\n\
    \nclass Knight(Warrior):\n\n    def __init__(self):\n        super().__init__()\n\
    \        self.attack = 7\n\n\nclass Defender(Warrior):\n\n    def __init__(self):\n\
    \        super().__init__()\n        self.health = 60\n        self.attack = 3\n\
    \        self.defense = 2\n\n\nclass Rookie(Warrior):\n    def __init__(self,\
    \ *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.health\
    \ = 50\n        self.attack = 1\n\n\nclass Vampire(Warrior):\n    def __init__(self):\n\
    \        super().__init__()\n        self.health = 40\n        self.attack = 4\n\
    \        self.vampirism = 50\n\n\ndef fight(unit_1, unit_2):\n    while unit_1.is_alive\
    \ and unit_2.is_alive:\n        damage = (unit_1.attack - unit_2.defense) if (unit_1.attack\
    \ - unit_2.defense) > 0 else 0\n        unit_2.health -= damage\n        unit_1.health\
    \ += damage * unit_1.vampirism / 100\n        if unit_2.is_alive:\n          \
    \  damage = (unit_2.attack - unit_1.defense) if (unit_2.attack - unit_1.defense)\
    \ > 0 else 0\n            unit_1.health -= damage\n            unit_2.health +=\
    \ damage * unit_2.vampirism / 100\n        else:\n            return True\n  \
    \  return False\n\n\nclass Army:\n    def __init__(self):\n        self.units\
    \ = []\n\n    def add_units(self, warrior: Warrior, amount):\n        for i in\
    \ range(amount):\n            self.units.append(warrior())\n\n    def kill_unit(self):\n\
    \        self.units.pop(0)\n\n\nclass Battle:\n    def __init__(self):\n     \
    \   self.army1 = None\n        self.army2 = None\n\n    def fight(self, army1:\
    \ Army, army2: Army):\n        self.army1 = army1\n        self.army2 = army2\n\
    \        while True:\n            if fight(self.army1.units[0], self.army2.units[0]):\n\
    \                self.army2.kill_unit()\n            else:\n                self.army1.kill_unit()\n\
    \            if len(self.army1.units) == 0:\n                return False\n  \
    \          if len(self.army2.units) == 0:\n                return True\n\n\nif\
    \ __name__ == '__main__':\n    # These \"asserts\" using only for self-checking\
    \ and not necessary for auto-testing\n\n    chuck = Warrior()\n    bruce = Warrior()\n\
    \    carl = Knight()\n    dave = Warrior()\n    mark = Warrior()\n\n    assert\
    \ fight(chuck, bruce) == True\n    assert fight(dave, carl) == False\n    assert\
    \ chuck.is_alive == True\n    assert bruce.is_alive == False\n    assert carl.is_alive\
    \ == True\n    assert dave.is_alive == False\n    assert fight(carl, mark) ==\
    \ False\n    assert carl.is_alive == False\n\n    print(\"Coding complete? Let's\
    \ try tests!\")\n\nif __name__ == '__main__':\n    # These \"asserts\" using only\
    \ for self-checking and not necessary for auto-testing\n\n    # fight tests\n\
    \    chuck = Warrior()\n    bruce = Warrior()\n    carl = Knight()\n    dave =\
    \ Warrior()\n    mark = Warrior()\n\n    assert fight(chuck, bruce) == True\n\
    \    assert fight(dave, carl) == False\n    assert chuck.is_alive == True\n  \
    \  assert bruce.is_alive == False\n    assert carl.is_alive == True\n    assert\
    \ dave.is_alive == False\n    assert fight(carl, mark) == False\n    assert carl.is_alive\
    \ == False\n\n    # battle tests\n    my_army = Army()\n    my_army.add_units(Knight,\
    \ 3)\n\n    enemy_army = Army()\n    enemy_army.add_units(Warrior, 3)\n\n    army_3\
    \ = Army()\n    army_3.add_units(Warrior, 20)\n    army_3.add_units(Knight, 5)\n\
    \n    army_4 = Army()\n    army_4.add_units(Warrior, 30)\n\n    battle = Battle()\n\
    \n    assert battle.fight(my_army, enemy_army) == True\n    assert battle.fight(army_3,\
    \ army_4) == False\n    print(\"Coding complete? Let's try tests!\")\n\nif __name__\
    \ == '__main__':\n    # These \"asserts\" using only for self-checking and not\
    \ necessary for auto-testing\n\n    # fight tests\n    chuck = Warrior()\n   \
    \ bruce = Warrior()\n    carl = Knight()\n    dave = Warrior()\n    mark = Warrior()\n\
    \    bob = Defender()\n    mike = Knight()\n    rog = Warrior()\n    lancelot\
    \ = Defender()\n\n    assert fight(chuck, bruce) == True\n    assert fight(dave,\
    \ carl) == False\n    assert chuck.is_alive == True\n    assert bruce.is_alive\
    \ == False\n    assert carl.is_alive == True\n    assert dave.is_alive == False\n\
    \    assert fight(carl, mark) == False\n    assert carl.is_alive == False\n  \
    \  assert fight(bob, mike) == False\n    assert fight(lancelot, rog) == True\n\
    \n    # battle tests\n    my_army = Army()\n    my_army.add_units(Defender, 1)\n\
    \n    enemy_army = Army()\n    enemy_army.add_units(Warrior, 2)\n\n    army_3\
    \ = Army()\n    army_3.add_units(Warrior, 1)\n    army_3.add_units(Defender, 1)\n\
    \n    army_4 = Army()\n    army_4.add_units(Warrior, 2)\n\n    battle = Battle()\n\
    \n    assert battle.fight(my_army, enemy_army) == False\n    assert battle.fight(army_3,\
    \ army_4) == True\n    print(\"Coding complete? Let's try tests!\")\n\nif __name__\
    \ == '__main__':\n    # These \"asserts\" using only for self-checking and not\
    \ necessary for auto-testing\n\n    # fight tests\n    chuck = Warrior()\n   \
    \ bruce = Warrior()\n    carl = Knight()\n    dave = Warrior()\n    mark = Warrior()\n\
    \    bob = Defender()\n    mike = Knight()\n    rog = Warrior()\n    lancelot\
    \ = Defender()\n    eric = Vampire()\n    adam = Vampire()\n    richard = Defender()\n\
    \    ogre = Warrior()\n\n    assert fight(chuck, bruce) == True\n    assert fight(dave,\
    \ carl) == False\n    assert chuck.is_alive == True\n    assert bruce.is_alive\
    \ == False\n    assert carl.is_alive == True\n    assert dave.is_alive == False\n\
    \    assert fight(carl, mark) == False\n    assert carl.is_alive == False\n  \
    \  assert fight(bob, mike) == False\n    assert fight(lancelot, rog) == True\n\
    \    assert fight(eric, richard) == False\n    assert fight(ogre, adam) == True\n\
    \n    # battle tests\n    my_army = Army()\n    my_army.add_units(Defender, 2)\n\
    \    my_army.add_units(Vampire, 2)\n    my_army.add_units(Warrior, 1)\n\n    enemy_army\
    \ = Army()\n    enemy_army.add_units(Warrior, 2)\n    enemy_army.add_units(Defender,\
    \ 2)\n    enemy_army.add_units(Vampire, 3)\n\n    army_3 = Army()\n    army_3.add_units(Warrior,\
    \ 1)\n    army_3.add_units(Defender, 4)\n\n    army_4 = Army()\n    army_4.add_units(Vampire,\
    \ 3)\n    army_4.add_units(Warrior, 2)\n\n    battle = Battle()\n\n    assert\
    \ battle.fight(my_army, enemy_army) == False\n    assert battle.fight(army_3,\
    \ army_4) == True\n    print(\"Coding complete? Let's try tests!\")\n\n\nif __name__\
    \ == '__main__':\n    #These \"asserts\" using only for self-checking and not\
    \ necessary for auto-testing\n    \n    #fight tests\n    chuck = Warrior()\n\
    \    bruce = Warrior()\n    carl = Knight()\n    dave = Warrior()\n    mark =\
    \ Warrior()\n    bob = Defender()\n    mike = Knight()\n    rog = Warrior()\n\
    \    lancelot = Defender()\n    eric = Vampire()\n    adam = Vampire()\n    richard\
    \ = Defender()\n    ogre = Warrior()\n    freelancer = Lancer()\n    vampire =\
    \ Vampire()\n\n    assert fight(chuck, bruce) == True\n    assert fight(dave,\
    \ carl) == False\n    assert chuck.is_alive == True\n    assert bruce.is_alive\
    \ == False\n    assert carl.is_alive == True\n    assert dave.is_alive == False\n\
    \    assert fight(carl, mark) == False\n    assert carl.is_alive == False\n  \
    \  assert fight(bob, mike) == False\n    assert fight(lancelot, rog) == True\n\
    \    assert fight(eric, richard) == False\n    assert fight(ogre, adam) == True\n\
    \    assert fight(freelancer, vampire) == True\n    assert freelancer.is_alive\
    \ == True\n\n    #battle tests\n    my_army = Army()\n    my_army.add_units(Defender,\
    \ 2)\n    my_army.add_units(Vampire, 2)\n    my_army.add_units(Lancer, 4)\n  \
    \  my_army.add_units(Warrior, 1)\n    \n    enemy_army = Army()\n    enemy_army.add_units(Warrior,\
    \ 2)\n    enemy_army.add_units(Lancer, 2)\n    enemy_army.add_units(Defender,\
    \ 2)\n    enemy_army.add_units(Vampire, 3)\n\n    army_3 = Army()\n    army_3.add_units(Warrior,\
    \ 1)\n    army_3.add_units(Lancer, 1)\n    army_3.add_units(Defender, 2)\n\n \
    \   army_4 = Army()\n    army_4.add_units(Vampire, 3)\n    army_4.add_units(Warrior,\
    \ 1)\n    army_4.add_units(Lancer, 2)\n\n    battle = Battle()\n\n    assert battle.fight(my_army,\
    \ enemy_army) == True\n    assert battle.fight(army_3, army_4) == False\n    print(\"\
    Coding complete? Let's try tests!\")\n"
  learner_created: false
status: Unchecked
code: "# Taken from mission The Vampires\n\n# Taken from mission The Defenders\n\n\
  # Taken from mission Army Battles\n\n# Taken from mission The Warriors\n\nclass\
  \ Warrior:\n\n    def __init__(self):\n        self.health = 50\n        self.attack\
  \ = 5\n        self.defense = 0\n        self.vampirism = 0\n\n    @property\n \
  \   def is_alive(self):\n        return True if self.health > 0 else False\n\n\n\
  class Knight(Warrior):\n\n    def __init__(self):\n        super().__init__()\n\
  \        self.attack = 7\n\n\nclass Defender(Warrior):\n\n    def __init__(self):\n\
  \        super().__init__()\n        self.health = 60\n        self.attack = 3\n\
  \        self.defense = 2\n\n\nclass Rookie(Warrior):\n    def __init__(self, *args,\
  \ **kwargs):\n        super().__init__(*args, **kwargs)\n        self.health = 50\n\
  \        self.attack = 1\n\n\nclass Vampire(Warrior):\n    def __init__(self):\n\
  \        super().__init__()\n        self.health = 40\n        self.attack = 4\n\
  \        self.vampirism = 50\n\n\ndef fight(unit_1, unit_2):\n    while unit_1.is_alive\
  \ and unit_2.is_alive:\n        damage = (unit_1.attack - unit_2.defense) if (unit_1.attack\
  \ - unit_2.defense) > 0 else 0\n        unit_2.health -= damage\n        unit_1.health\
  \ += damage * unit_1.vampirism / 100\n        if unit_2.is_alive:\n            damage\
  \ = (unit_2.attack - unit_1.defense) if (unit_2.attack - unit_1.defense) > 0 else\
  \ 0\n            unit_1.health -= damage\n            unit_2.health += damage *\
  \ unit_2.vampirism / 100\n        else:\n            return True\n    return False\n\
  \n\nclass Army:\n    def __init__(self):\n        self.units = []\n\n    def add_units(self,\
  \ warrior: Warrior, amount):\n        for i in range(amount):\n            self.units.append(warrior())\n\
  \n    def kill_unit(self):\n        self.units.pop(0)\n\n\nclass Battle:\n    def\
  \ __init__(self):\n        self.army1 = None\n        self.army2 = None\n\n    def\
  \ fight(self, army1: Army, army2: Army):\n        self.army1 = army1\n        self.army2\
  \ = army2\n        while True:\n            if fight(self.army1.units[0], self.army2.units[0]):\n\
  \                self.army2.kill_unit()\n            else:\n                self.army1.kill_unit()\n\
  \            if len(self.army1.units) == 0:\n                return False\n    \
  \        if len(self.army2.units) == 0:\n                return True\n\n\nif __name__\
  \ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary\
  \ for auto-testing\n\n    chuck = Warrior()\n    bruce = Warrior()\n    carl = Knight()\n\
  \    dave = Warrior()\n    mark = Warrior()\n\n    assert fight(chuck, bruce) ==\
  \ True\n    assert fight(dave, carl) == False\n    assert chuck.is_alive == True\n\
  \    assert bruce.is_alive == False\n    assert carl.is_alive == True\n    assert\
  \ dave.is_alive == False\n    assert fight(carl, mark) == False\n    assert carl.is_alive\
  \ == False\n\n    print(\"Coding complete? Let's try tests!\")\n\nif __name__ ==\
  \ '__main__':\n    # These \"asserts\" using only for self-checking and not necessary\
  \ for auto-testing\n\n    # fight tests\n    chuck = Warrior()\n    bruce = Warrior()\n\
  \    carl = Knight()\n    dave = Warrior()\n    mark = Warrior()\n\n    assert fight(chuck,\
  \ bruce) == True\n    assert fight(dave, carl) == False\n    assert chuck.is_alive\
  \ == True\n    assert bruce.is_alive == False\n    assert carl.is_alive == True\n\
  \    assert dave.is_alive == False\n    assert fight(carl, mark) == False\n    assert\
  \ carl.is_alive == False\n\n    # battle tests\n    my_army = Army()\n    my_army.add_units(Knight,\
  \ 3)\n\n    enemy_army = Army()\n    enemy_army.add_units(Warrior, 3)\n\n    army_3\
  \ = Army()\n    army_3.add_units(Warrior, 20)\n    army_3.add_units(Knight, 5)\n\
  \n    army_4 = Army()\n    army_4.add_units(Warrior, 30)\n\n    battle = Battle()\n\
  \n    assert battle.fight(my_army, enemy_army) == True\n    assert battle.fight(army_3,\
  \ army_4) == False\n    print(\"Coding complete? Let's try tests!\")\n\nif __name__\
  \ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary\
  \ for auto-testing\n\n    # fight tests\n    chuck = Warrior()\n    bruce = Warrior()\n\
  \    carl = Knight()\n    dave = Warrior()\n    mark = Warrior()\n    bob = Defender()\n\
  \    mike = Knight()\n    rog = Warrior()\n    lancelot = Defender()\n\n    assert\
  \ fight(chuck, bruce) == True\n    assert fight(dave, carl) == False\n    assert\
  \ chuck.is_alive == True\n    assert bruce.is_alive == False\n    assert carl.is_alive\
  \ == True\n    assert dave.is_alive == False\n    assert fight(carl, mark) == False\n\
  \    assert carl.is_alive == False\n    assert fight(bob, mike) == False\n    assert\
  \ fight(lancelot, rog) == True\n\n    # battle tests\n    my_army = Army()\n   \
  \ my_army.add_units(Defender, 1)\n\n    enemy_army = Army()\n    enemy_army.add_units(Warrior,\
  \ 2)\n\n    army_3 = Army()\n    army_3.add_units(Warrior, 1)\n    army_3.add_units(Defender,\
  \ 1)\n\n    army_4 = Army()\n    army_4.add_units(Warrior, 2)\n\n    battle = Battle()\n\
  \n    assert battle.fight(my_army, enemy_army) == False\n    assert battle.fight(army_3,\
  \ army_4) == True\n    print(\"Coding complete? Let's try tests!\")\n\nif __name__\
  \ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary\
  \ for auto-testing\n\n    # fight tests\n    chuck = Warrior()\n    bruce = Warrior()\n\
  \    carl = Knight()\n    dave = Warrior()\n    mark = Warrior()\n    bob = Defender()\n\
  \    mike = Knight()\n    rog = Warrior()\n    lancelot = Defender()\n    eric =\
  \ Vampire()\n    adam = Vampire()\n    richard = Defender()\n    ogre = Warrior()\n\
  \n    assert fight(chuck, bruce) == True\n    assert fight(dave, carl) == False\n\
  \    assert chuck.is_alive == True\n    assert bruce.is_alive == False\n    assert\
  \ carl.is_alive == True\n    assert dave.is_alive == False\n    assert fight(carl,\
  \ mark) == False\n    assert carl.is_alive == False\n    assert fight(bob, mike)\
  \ == False\n    assert fight(lancelot, rog) == True\n    assert fight(eric, richard)\
  \ == False\n    assert fight(ogre, adam) == True\n\n    # battle tests\n    my_army\
  \ = Army()\n    my_army.add_units(Defender, 2)\n    my_army.add_units(Vampire, 2)\n\
  \    my_army.add_units(Warrior, 1)\n\n    enemy_army = Army()\n    enemy_army.add_units(Warrior,\
  \ 2)\n    enemy_army.add_units(Defender, 2)\n    enemy_army.add_units(Vampire, 3)\n\
  \n    army_3 = Army()\n    army_3.add_units(Warrior, 1)\n    army_3.add_units(Defender,\
  \ 4)\n\n    army_4 = Army()\n    army_4.add_units(Vampire, 3)\n    army_4.add_units(Warrior,\
  \ 2)\n\n    battle = Battle()\n\n    assert battle.fight(my_army, enemy_army) ==\
  \ False\n    assert battle.fight(army_3, army_4) == True\n    print(\"Coding complete?\
  \ Let's try tests!\")\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using\
  \ only for self-checking and not necessary for auto-testing\n    \n    #fight tests\n\
  \    chuck = Warrior()\n    bruce = Warrior()\n    carl = Knight()\n    dave = Warrior()\n\
  \    mark = Warrior()\n    bob = Defender()\n    mike = Knight()\n    rog = Warrior()\n\
  \    lancelot = Defender()\n    eric = Vampire()\n    adam = Vampire()\n    richard\
  \ = Defender()\n    ogre = Warrior()\n    freelancer = Lancer()\n    vampire = Vampire()\n\
  \n    assert fight(chuck, bruce) == True\n    assert fight(dave, carl) == False\n\
  \    assert chuck.is_alive == True\n    assert bruce.is_alive == False\n    assert\
  \ carl.is_alive == True\n    assert dave.is_alive == False\n    assert fight(carl,\
  \ mark) == False\n    assert carl.is_alive == False\n    assert fight(bob, mike)\
  \ == False\n    assert fight(lancelot, rog) == True\n    assert fight(eric, richard)\
  \ == False\n    assert fight(ogre, adam) == True\n    assert fight(freelancer, vampire)\
  \ == True\n    assert freelancer.is_alive == True\n\n    #battle tests\n    my_army\
  \ = Army()\n    my_army.add_units(Defender, 2)\n    my_army.add_units(Vampire, 2)\n\
  \    my_army.add_units(Lancer, 4)\n    my_army.add_units(Warrior, 1)\n    \n   \
  \ enemy_army = Army()\n    enemy_army.add_units(Warrior, 2)\n    enemy_army.add_units(Lancer,\
  \ 2)\n    enemy_army.add_units(Defender, 2)\n    enemy_army.add_units(Vampire, 3)\n\
  \n    army_3 = Army()\n    army_3.add_units(Warrior, 1)\n    army_3.add_units(Lancer,\
  \ 1)\n    army_3.add_units(Defender, 2)\n\n    army_4 = Army()\n    army_4.add_units(Vampire,\
  \ 3)\n    army_4.add_units(Warrior, 1)\n    army_4.add_units(Lancer, 2)\n\n    battle\
  \ = Battle()\n\n    assert battle.fight(my_army, enemy_army) == True\n    assert\
  \ battle.fight(army_3, army_4) == False\n    print(\"Coding complete? Let's try\
  \ tests!\")\n"
seconds_from_change: 9223372036854775807
