type: checkiO
files:
- name: mission.py
  visible: true
  text: |
    from functools import reduce


    def best_stock(data: dict) -> str:
        key = list(data.keys())[0]
        val = data[key]
        for i in data:
            if val < data[i]:
                val = data[i]
                key = i
        return key
    max()


    if __name__ == '__main__':
        print("Example:")
        print(best_stock({"CAC": 10.0, "ATX": 390.2, "WIG": 1.2}))

        # These "asserts" are used for self-checking and not for an auto-testing
        assert best_stock({"CAC": 10.0, "ATX": 390.2, "WIG": 1.2}) == "ATX"
        assert best_stock({"CAC": 91.1, "ATX": 1.01, "TASI": 120.9}) == "TASI"
        print("Coding complete? Click 'Check' to earn cool rewards!")
  learner_created: false
status: Solved
code: |
  from functools import reduce


  def best_stock(data: dict) -> str:
      key = list(data.keys())[0]
      val = data[key]
      for i in data:
          if val < data[i]:
              val = data[i]
              key = i
      return key
  max()


  if __name__ == '__main__':
      print("Example:")
      print(best_stock({"CAC": 10.0, "ATX": 390.2, "WIG": 1.2}))

      # These "asserts" are used for self-checking and not for an auto-testing
      assert best_stock({"CAC": 10.0, "ATX": 390.2, "WIG": 1.2}) == "ATX"
      assert best_stock({"CAC": 91.1, "ATX": 1.01, "TASI": 120.9}) == "TASI"
      print("Coding complete? Click 'Check' to earn cool rewards!")
seconds_from_change: 9123
